// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-fetch';
import type { ProjectServiceCreateProjectData, ProjectServiceCreateProjectResponse, ProjectServiceCreateProjectError, ProjectServiceGetProjectData, ProjectServiceGetProjectResponse, ProjectServiceGetProjectError, ProjectServiceUpdateProjectData, ProjectServiceUpdateProjectResponse, ProjectServiceUpdateProjectError, ProjectServiceDeleteProjectData, ProjectServiceDeleteProjectError, ProjectServiceListUserProjectsData, ProjectServiceListUserProjectsResponse, ProjectServiceRefineWithAiData, ProjectServiceRefineWithAiResponse, ProjectServiceRefineWithAiError, ProjectServiceSaveStepDataData, ProjectServiceSaveStepDataResponse, ProjectServiceSaveStepDataError, ProjectServiceCompleteProjectData, ProjectServiceCompleteProjectResponse, ProjectServiceCompleteProjectError, ProjectServiceGetProjectExportData, ProjectServiceGetProjectExportResponse, ProjectServiceGetProjectExportError, ProjectServiceGetUserStatsData, ProjectServiceGetUserStatsResponse, FinalDocumentServiceGenerateFinalDocumentData, FinalDocumentServiceGenerateFinalDocumentResponse, FinalDocumentServiceGenerateFinalDocumentError, FinalDocumentServiceGetProjectSummaryData, FinalDocumentServiceGetProjectSummaryResponse, FinalDocumentServiceGetProjectSummaryError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

/**
 * Project Service Create Project
 * Create a new project plan for the authenticated user
 */
export const projectServiceCreateProject = <ThrowOnError extends boolean = false>(options: Options<ProjectServiceCreateProjectData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ProjectServiceCreateProjectResponse, ProjectServiceCreateProjectError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/project_service/create_project',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Project Service Get Project
 * Get a project by ID (user must own the project)
 */
export const projectServiceGetProject = <ThrowOnError extends boolean = false>(options: Options<ProjectServiceGetProjectData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ProjectServiceGetProjectResponse, ProjectServiceGetProjectError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/project_service/get_project',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Project Service Update Project
 * Update a project (user must own the project)
 */
export const projectServiceUpdateProject = <ThrowOnError extends boolean = false>(options: Options<ProjectServiceUpdateProjectData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ProjectServiceUpdateProjectResponse, ProjectServiceUpdateProjectError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/project_service/update_project',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Project Service Delete Project
 * Delete a project (user must own the project)
 */
export const projectServiceDeleteProject = <ThrowOnError extends boolean = false>(options: Options<ProjectServiceDeleteProjectData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, ProjectServiceDeleteProjectError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/project_service/delete_project',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Project Service List User Projects
 * Get all projects for the authenticated user
 */
export const projectServiceListUserProjects = <ThrowOnError extends boolean = false>(options?: Options<ProjectServiceListUserProjectsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ProjectServiceListUserProjectsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/project_service/list_user_projects',
        ...options
    });
};

/**
 * Project Service Refine With Ai
 * Use AI to refine content for a specific planning step.
 * This is the core integration point for the 8-step planning process.
 */
export const projectServiceRefineWithAi = <ThrowOnError extends boolean = false>(options: Options<ProjectServiceRefineWithAiData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ProjectServiceRefineWithAiResponse, ProjectServiceRefineWithAiError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/project_service/refine_with_ai',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Project Service Save Step Data
 * Save the data for a specific planning step
 */
export const projectServiceSaveStepData = <ThrowOnError extends boolean = false>(options: Options<ProjectServiceSaveStepDataData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ProjectServiceSaveStepDataResponse, ProjectServiceSaveStepDataError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/project_service/save_step_data',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Project Service Complete Project
 * Mark a project as completed
 */
export const projectServiceCompleteProject = <ThrowOnError extends boolean = false>(options: Options<ProjectServiceCompleteProjectData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ProjectServiceCompleteProjectResponse, ProjectServiceCompleteProjectError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/project_service/complete_project',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Project Service Get Project Export
 * Generate an export-ready version of the project specification
 */
export const projectServiceGetProjectExport = <ThrowOnError extends boolean = false>(options: Options<ProjectServiceGetProjectExportData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ProjectServiceGetProjectExportResponse, ProjectServiceGetProjectExportError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/project_service/get_project_export',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Project Service Get User Stats
 * Get statistics for the authenticated user
 */
export const projectServiceGetUserStats = <ThrowOnError extends boolean = false>(options?: Options<ProjectServiceGetUserStatsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ProjectServiceGetUserStatsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/project_service/get_user_stats',
        ...options
    });
};

/**
 * Final Document Service Generate Final Document
 * Generate a comprehensive final document combining all planning steps.
 *
 * This compiles all the user inputs and AI responses from the 8-step planning
 * process into a single, organized document ready for export or implementation.
 */
export const finalDocumentServiceGenerateFinalDocument = <ThrowOnError extends boolean = false>(options: Options<FinalDocumentServiceGenerateFinalDocumentData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<FinalDocumentServiceGenerateFinalDocumentResponse, FinalDocumentServiceGenerateFinalDocumentError, ThrowOnError>({
        url: '/api/final_document_service/generate_final_document',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Final Document Service Get Project Summary
 * Get a quick summary of project completion status.
 */
export const finalDocumentServiceGetProjectSummary = <ThrowOnError extends boolean = false>(options: Options<FinalDocumentServiceGetProjectSummaryData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<FinalDocumentServiceGetProjectSummaryResponse, FinalDocumentServiceGetProjectSummaryError, ThrowOnError>({
        url: '/api/final_document_service/get_project_summary',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};