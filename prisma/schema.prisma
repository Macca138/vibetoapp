generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String             @id @default(cuid())
  email         String             @unique
  name          String?
  passwordHash  String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  accounts      Account[]
  emailLogs     EmailLog[]
  exportJobs    ExportJob[]
  payments      PaymentRecord[]
  projects      Project[]
  sessions      Session[]
  subscriptions UserSubscription[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id                    String                 @id @default(cuid())
  name                  String
  description           String?
  userId                String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  dataFlowRelationships DataFlowRelationship[]
  exportJobs            ExportJob[]
  payments              PaymentRecord[]
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  workflow              ProjectWorkflow?

  @@index([userId])
}

model ProjectWorkflow {
  id          String             @id @default(cuid())
  projectId   String             @unique
  currentStep Int                @default(1)
  isCompleted Boolean            @default(false)
  completedAt DateTime?
  startedAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  project     Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  responses   WorkflowResponse[]

  @@index([projectId])
}

model WorkflowResponse {
  id            String          @id @default(cuid())
  workflowId    String
  stepId        Int
  responses     Json
  completed     Boolean         @default(false)
  aiSuggestions String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  workflow      ProjectWorkflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@unique([workflowId, stepId])
  @@index([workflowId])
}

model Waitlist {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  referrer  String?
  source    String?
  createdAt DateTime @default(now())

  @@index([email])
  @@index([createdAt])
}

model DataFlowRelationship {
  id              String   @id @default(cuid())
  projectId       String
  sourceStepId    Int
  targetStepId    Int
  sourceField     String
  targetField     String
  transformType   String?
  transformConfig Json?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  project         Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, sourceStepId, sourceField, targetStepId, targetField])
  @@index([projectId])
  @@index([sourceStepId, targetStepId])
}

model UserSubscription {
  id                   String    @id @default(cuid())
  userId               String
  stripeCustomerId     String?   @unique
  stripeSubscriptionId String?   @unique
  stripePriceId        String?
  status               String
  type                 String
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean   @default(false)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([stripeCustomerId])
  @@index([status])
}

model PaymentRecord {
  id              String   @id @default(cuid())
  userId          String
  projectId       String?
  stripePaymentId String   @unique
  stripeSessionId String?  @unique
  amount          Int
  currency        String   @default("usd")
  status          String
  type            String
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  project         Project? @relation(fields: [projectId], references: [id])
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([projectId])
  @@index([status])
  @@index([type])
}

model ExportJob {
  id           String     @id @default(cuid())
  userId       String
  projectId    String
  format       String
  status       String
  filename     String?
  fileUrl      String?
  fileSize     Int?
  errorMessage String?
  jobId        String?
  startedAt    DateTime?
  completedAt  DateTime?
  expiresAt    DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  emailLogs    EmailLog[]
  project      Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([projectId])
  @@index([status])
  @@index([createdAt])
}

model EmailLog {
  id             String     @id @default(cuid())
  userId         String
  exportJobId    String?
  recipientEmail String
  emailType      String
  subject        String
  status         String
  resendId       String?
  errorMessage   String?
  sentAt         DateTime?
  deliveredAt    DateTime?
  openedAt       DateTime?
  clickedAt      DateTime?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  exportJob      ExportJob? @relation(fields: [exportJobId], references: [id])
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([exportJobId])
  @@index([status])
  @@index([emailType])
  @@index([createdAt])
}
