// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  passwordHash  String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  projects      Project[]
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  workflow    ProjectWorkflow?
  
  @@index([userId])
}

model ProjectWorkflow {
  id            String   @id @default(cuid())
  projectId     String   @unique
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  currentStep   Int      @default(1)
  isCompleted   Boolean  @default(false)
  completedAt   DateTime?
  startedAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  responses     WorkflowResponse[]
  
  @@index([projectId])
}

model WorkflowResponse {
  id               String           @id @default(cuid())
  workflowId       String
  workflow         ProjectWorkflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  stepId           Int
  responses        Json             // Store field responses as JSON
  completed        Boolean          @default(false)
  aiSuggestions    String?          @db.Text
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  
  @@unique([workflowId, stepId])
  @@index([workflowId])
}

model Waitlist {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  referrer  String?
  source    String?
  createdAt DateTime @default(now())
  
  @@index([email])
  @@index([createdAt])
}
